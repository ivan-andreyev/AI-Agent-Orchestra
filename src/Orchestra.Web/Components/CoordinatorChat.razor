@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using Orchestra.Web.Services
@using Microsoft.Extensions.Configuration
@inherits AutoRefreshComponent
@implements IAsyncDisposable
@inject ILogger<CoordinatorChat> Logger
@inject LoggingService LoggingService
@inject IConfiguration Configuration

<div class="coordinator-chat">
    <div class="chat-header">
        <h4>ü§ñ Coordinator Agent</h4>
        <div class="connection-status @(_connectionState.ToLowerInvariant())">
            @GetConnectionStatusText()
        </div>
        @if (_hubConnection != null)
        {
            <button class="btn btn-sm btn-outline-secondary" @onclick="ReconnectAsync" disabled="@(_isConnecting)">
                @if (_isConnecting)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    <span>Connecting...</span>
                }
                else
                {
                    <span>üîÑ Reconnect</span>
                }
            </button>
        }
    </div>

    <div class="chat-messages" style="overflow-y: auto; max-height: 400px; scroll-behavior: smooth;">
        @foreach (var message in _messages)
        {
            <div class="message message-@message.Type">
                <div class="message-timestamp">@message.Timestamp.ToString("HH:mm:ss")</div>
                <div class="message-content">
                    @if (message.Type == "command")
                    {
                        <span class="command-prompt">></span>
                    }
                    @((MarkupString)FormatMessage(message.Message))
                </div>
            </div>
        }
        @if (_isProcessingCommand)
        {
            <div class="message message-processing">
                <div class="message-content">
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    Processing command...
                </div>
            </div>
        }
    </div>

    <div class="chat-input">
        <div class="input-group">
            <span class="input-group-text">></span>
            <input @ref="commandInput"
                   type="text"
                   class="form-control"
                   placeholder="Enter coordinator command (type 'help' for commands)"
                   @bind="_currentCommand"
                   @onkeypress="OnKeyPress"
                   disabled="@(!IsConnected || _isProcessingCommand)" />
            <button class="btn btn-primary"
                    @onclick="SendCommandAsync"
                    disabled="@(!IsConnected || _isProcessingCommand || string.IsNullOrWhiteSpace(_currentCommand))">
                Send
            </button>
        </div>
        @if (_commandHistory.Any())
        {
            <div class="command-history">
                <small class="text-muted">
                    Use ‚Üë/‚Üì arrows to navigate command history
                </small>
            </div>
        }
    </div>
</div>

@code {
    private HubConnection? _hubConnection;
    private ElementReference commandInput;
    private readonly List<ChatMessage> _messages = new();
    private readonly List<string> _commandHistory = new();
    private int _historyIndex = -1;
    private string _currentCommand = string.Empty;
    private string _connectionState = "Disconnected";
    private bool _isConnecting = false;
    private bool _isProcessingCommand = false;

    /// <summary>
    /// Indicates if the SignalR connection is established
    /// </summary>
    private bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        using (LoggingService.MeasureOperation("CoordinatorChat", "OnInitializedAsync"))
        {
            LoggingService.LogComponentLifecycle("CoordinatorChat", "Initializing");

            await InitializeSignalRConnection();
            await base.OnInitializedAsync();

            LoggingService.LogComponentLifecycle("CoordinatorChat", "Initialized");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await commandInput.FocusAsync();
        }

    }

    protected override async Task RefreshDataAsync()
    {
        // Update connection state
        if (_hubConnection != null)
        {
            var previousState = _connectionState;
            _connectionState = _hubConnection.State.ToString();

            if (previousState != _connectionState)
            {
                Logger.LogInformation("CoordinatorChat: Connection state changed from {PreviousState} to {CurrentState}",
                    previousState, _connectionState);
                StateHasChanged();
            }
        }
    }

    /// <summary>
    /// Initializes SignalR connection to CoordinatorChatHub
    /// </summary>
    private async Task InitializeSignalRConnection()
    {
        using (LoggingService.MeasureOperation("CoordinatorChat", "InitializeSignalRConnection"))
        {
            try
            {
                LoggingService.LogSignalREvent("CoordinatorChatHub", "InitializingConnection");

                var hubUrl = GetSignalRHubUrl();
                Logger.LogInformation("CoordinatorChat: Using SignalR Hub URL: {HubUrl}", hubUrl);

                _hubConnection = new HubConnectionBuilder()
                    .WithUrl(hubUrl)
                    .WithAutomaticReconnect()
                    .Build();

                // Handle incoming responses from coordinator
                _hubConnection.On<object>("ReceiveResponse", (response) =>
                {
                    InvokeAsync(async () =>
                    {
                        try
                        {
                            var jsonResponse = JsonSerializer.Serialize(response, new JsonSerializerOptions { WriteIndented = true });
                            var responseData = JsonSerializer.Deserialize<CoordinatorResponse>(jsonResponse);

                            if (responseData != null)
                            {
                                LoggingService.LogSignalREvent("CoordinatorChatHub", "ReceiveResponse",
                                    _hubConnection.ConnectionId, new { Type = responseData.Type, MessageLength = responseData.Message.Length });

                                _messages.Add(new ChatMessage
                                {
                                    Message = responseData.Message,
                                    Type = responseData.Type,
                                    Timestamp = responseData.Timestamp.ToLocalTime()
                                });

                                _isProcessingCommand = false;
                                StateHasChanged();
                            }
                        }
                        catch (Exception ex)
                        {
                            LoggingService.LogError("CoordinatorChat", "ProcessSignalRResponse", ex, response);
                            AddErrorMessage($"Error processing response: {ex.Message}");
                        }
                    });
                });

            // Handle connection state changes
            _hubConnection.Reconnecting += (error) =>
            {
                InvokeAsync(() =>
                {
                    Logger.LogWarning("CoordinatorChat: Connection lost, attempting to reconnect. Error: {Error}", error?.Message);
                    AddSystemMessage("üîÑ Connection lost, reconnecting...", "warning");
                    return Task.CompletedTask;
                });
                return Task.CompletedTask;
            };

            _hubConnection.Reconnected += (connectionId) =>
            {
                InvokeAsync(() =>
                {
                    Logger.LogInformation("CoordinatorChat: Reconnected with connection ID: {ConnectionId}", connectionId);
                    AddSystemMessage("‚úÖ Reconnected to coordinator", "success");
                    return Task.CompletedTask;
                });
                return Task.CompletedTask;
            };

            _hubConnection.Closed += (error) =>
            {
                InvokeAsync(() =>
                {
                    Logger.LogWarning("CoordinatorChat: Connection closed. Error: {Error}", error?.Message);
                    AddSystemMessage("‚ùå Connection closed", "error");
                    return Task.CompletedTask;
                });
                return Task.CompletedTask;
            };

                await ConnectAsync();
            }
            catch (Exception ex)
            {
                LoggingService.LogError("CoordinatorChat", "InitializeSignalRConnection", ex);
                AddErrorMessage($"Failed to initialize connection: {ex.Message}");
            }
        }
    }

    /// <summary>
    /// Connects to the SignalR hub
    /// </summary>
    private async Task ConnectAsync()
    {
        if (_hubConnection == null || _isConnecting)
            return;

        try
        {
            _isConnecting = true;
            StateHasChanged();

            Logger.LogInformation("CoordinatorChat: Attempting to connect to SignalR hub");
            await _hubConnection.StartAsync();

            Logger.LogInformation("CoordinatorChat: Successfully connected to SignalR hub");
            AddSystemMessage("üü¢ Connected to coordinator agent", "success");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "CoordinatorChat: Failed to connect to SignalR hub");
            AddErrorMessage($"Connection failed: {ex.Message}");
        }
        finally
        {
            _isConnecting = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Reconnects to the SignalR hub
    /// </summary>
    private async Task ReconnectAsync()
    {
        if (_hubConnection == null)
        {
            await InitializeSignalRConnection();
            return;
        }

        try
        {
            if (_hubConnection.State == HubConnectionState.Connected)
            {
                await _hubConnection.StopAsync();
            }

            await ConnectAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "CoordinatorChat: Failed to reconnect");
            AddErrorMessage($"Reconnection failed: {ex.Message}");
        }
    }

    /// <summary>
    /// Sends a command to the coordinator
    /// </summary>
    private async Task SendCommandAsync()
    {
        if (!IsConnected || string.IsNullOrWhiteSpace(_currentCommand) || _isProcessingCommand)
        {
            LoggingService.LogUserInteraction("CoordinatorChat", "SendCommandCancelled",
                new { IsConnected, HasCommand = !string.IsNullOrWhiteSpace(_currentCommand), IsProcessing = _isProcessingCommand });
            return;
        }

        using (LoggingService.MeasureOperation("CoordinatorChat", "SendCommand"))
        {
            try
            {
                var command = _currentCommand.Trim();
                LoggingService.LogUserInteraction("CoordinatorChat", "SendCommand", new { Command = command });

            // Add command to history
            if (!_commandHistory.Contains(command))
            {
                _commandHistory.Insert(0, command);
                if (_commandHistory.Count > 50) // Limit history size
                {
                    _commandHistory.RemoveAt(_commandHistory.Count - 1);
                }
            }
            _historyIndex = -1;

            // Add command to messages
            _messages.Add(new ChatMessage
            {
                Message = command,
                Type = "command",
                Timestamp = DateTime.Now
            });

            _isProcessingCommand = true;
            StateHasChanged();

                // Send to hub
                await _hubConnection!.SendAsync("SendCommand", command);
                LoggingService.LogSignalREvent("CoordinatorChatHub", "SendCommand",
                    _hubConnection.ConnectionId, new { Command = command });

                // Clear input
                _currentCommand = string.Empty;
                await commandInput.FocusAsync();
            }
            catch (Exception ex)
            {
                LoggingService.LogError("CoordinatorChat", "SendCommand", ex, new { Command = _currentCommand });
                AddErrorMessage($"Failed to send command: {ex.Message}");
                _isProcessingCommand = false;
            }

            StateHasChanged();
        }
    }

    /// <summary>
    /// Handles keyboard input for command history navigation
    /// </summary>
    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendCommandAsync();
        }
        else if (e.Key == "ArrowUp")
        {
            NavigateCommandHistory(1);
        }
        else if (e.Key == "ArrowDown")
        {
            NavigateCommandHistory(-1);
        }
    }

    /// <summary>
    /// Navigates through command history
    /// </summary>
    private void NavigateCommandHistory(int direction)
    {
        if (!_commandHistory.Any())
            return;

        _historyIndex += direction;
        _historyIndex = Math.Max(-1, Math.Min(_historyIndex, _commandHistory.Count - 1));

        _currentCommand = _historyIndex >= 0 ? _commandHistory[_historyIndex] : string.Empty;
        StateHasChanged();
    }

    /// <summary>
    /// Adds a system message to the chat
    /// </summary>
    private void AddSystemMessage(string message, string type = "info")
    {
        _messages.Add(new ChatMessage
        {
            Message = message,
            Type = type,
            Timestamp = DateTime.Now
        });
        StateHasChanged();
    }

    /// <summary>
    /// Adds an error message to the chat
    /// </summary>
    private void AddErrorMessage(string message)
    {
        AddSystemMessage($"‚ùå {message}", "error");
    }

    /// <summary>
    /// Gets connection status text with icon
    /// </summary>
    private string GetConnectionStatusText()
    {
        return _connectionState switch
        {
            "Connected" => "üü¢ Connected",
            "Connecting" => "üü° Connecting",
            "Reconnecting" => "üü° Reconnecting",
            "Disconnected" => "üî¥ Disconnected",
            _ => $"üî¥ {_connectionState}"
        };
    }

    /// <summary>
    /// Formats message content for display (supports basic markdown)
    /// </summary>
    private string FormatMessage(string message)
    {
        if (string.IsNullOrEmpty(message))
            return string.Empty;

        // Simple markdown formatting
        return message
            .Replace("**", "<strong>", StringComparison.OrdinalIgnoreCase)
            .Replace("**", "</strong>", StringComparison.OrdinalIgnoreCase)
            .Replace("`", "<code>", StringComparison.OrdinalIgnoreCase)
            .Replace("`", "</code>", StringComparison.OrdinalIgnoreCase)
            .Replace("\n", "<br/>", StringComparison.OrdinalIgnoreCase);
    }

    /// <summary>
    /// Gets SignalR Hub URL from configuration with fallback logic
    /// </summary>
    private string GetSignalRHubUrl()
    {
        try
        {
            // Try to get primary URL from configuration
            var primaryUrl = Configuration["SignalR:HubUrl"];
            if (!string.IsNullOrWhiteSpace(primaryUrl))
            {
                Logger.LogDebug("CoordinatorChat: Using primary SignalR URL from configuration: {Url}", primaryUrl);
                return primaryUrl;
            }

            // Try fallback URL from configuration
            var fallbackUrl = Configuration["SignalR:FallbackUrl"];
            if (!string.IsNullOrWhiteSpace(fallbackUrl))
            {
                Logger.LogWarning("CoordinatorChat: Primary URL not configured, using fallback URL: {Url}", fallbackUrl);
                return fallbackUrl;
            }

            // Final fallback to hardcoded development URL
            var defaultUrl = "http://localhost:5002/coordinatorHub";
            Logger.LogWarning("CoordinatorChat: No SignalR configuration found, using default URL: {Url}", defaultUrl);
            return defaultUrl;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "CoordinatorChat: Error reading SignalR configuration, using default URL");
            return "http://localhost:5002/coordinatorHub";
        }
    }


    public async ValueTask DisposeAsync()
    {
        Logger.LogInformation("CoordinatorChat: Disposing component");

        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    /// <summary>
    /// Represents a chat message
    /// </summary>
    private class ChatMessage
    {
        public string Message { get; set; } = string.Empty;
        public string Type { get; set; } = "info";
        public DateTime Timestamp { get; set; } = DateTime.Now;
    }

    /// <summary>
    /// Represents a coordinator response
    /// </summary>
    private class CoordinatorResponse
    {
        public string Message { get; set; } = string.Empty;
        public string Type { get; set; } = "info";
        public DateTime Timestamp { get; set; } = DateTime.UtcNow;
    }
}