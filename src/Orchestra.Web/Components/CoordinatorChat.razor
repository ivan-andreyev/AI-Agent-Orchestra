@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using System.Text.Json.Serialization
@using Orchestra.Web.Services
@using Microsoft.Extensions.Configuration
@inherits AutoRefreshComponent
@implements IAsyncDisposable
@inject ILogger<CoordinatorChat> Logger
@inject LoggingService LoggingService
@inject IConfiguration Configuration

<div class="coordinator-chat">
    <div class="chat-header">
        <h4>ðŸ¤– Coordinator Agent</h4>
        <div class="connection-status @(GetConnectionStatusClass())">
            @GetConnectionStatusText()
        </div>
        @if (_hubConnection != null)
        {
            <button class="btn btn-sm btn-outline-secondary" @onclick="ReconnectAsync" disabled="@(_isConnecting)">
                @if (_isConnecting)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    <span>Connecting...</span>
                }
                else
                {
                    <span>ðŸ”„ Reconnect</span>
                }
            </button>
        }
    </div>

    <div class="chat-messages" style="overflow-y: auto; scroll-behavior: smooth;">
        @foreach (var message in _messages)
        {
            <div class="message message-@message.Type">
                <div class="message-timestamp">@message.Timestamp.ToString("HH:mm:ss")</div>
                <div class="message-content">
                    @if (message.Type == "command")
                    {
                        <span class="command-prompt">></span>
                    }
                    @((MarkupString)FormatMessage(message.Message))
                </div>
            </div>
        }
        @if (_isProcessingCommand)
        {
            <div class="message message-processing">
                <div class="message-content">
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    Processing command...
                </div>
            </div>
        }
    </div>

    <div class="chat-input">
        <div class="input-group">
            <span class="input-group-text">></span>
            <input @ref="commandInput"
                   type="text"
                   class="form-control"
                   placeholder="Enter coordinator command (type 'help' for commands)"
                   @bind="_currentCommand"
                   @onkeypress="OnKeyPress"
                   disabled="@(!IsConnected || _isProcessingCommand)" />
            <button class="btn btn-primary"
                    @onclick="SendCommandAsync"
                    disabled="@(!IsConnected || _isProcessingCommand || string.IsNullOrWhiteSpace(_currentCommand))">
                Send
            </button>
        </div>
        @if (_commandHistory.Any())
        {
            <div class="command-history">
                <small class="text-muted">
                    Use â†‘/â†“ arrows to navigate command history
                </small>
            </div>
        }
    </div>
</div>