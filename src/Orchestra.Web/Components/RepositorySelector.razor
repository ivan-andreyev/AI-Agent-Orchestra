@using Orchestra.Web.Models

<div class="repository-selector">
    <h2>Repository Context</h2>
    <div class="d-flex align-items-center gap-3">
        <div class="dropdown">
            <button class="btn btn-outline-light dropdown-toggle" type="button" id="repositoryDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                @if (!string.IsNullOrEmpty(SelectedRepository) && Repositories != null && Repositories.ContainsKey(SelectedRepository))
                {
                    @($"{SelectedRepository} ({Repositories[SelectedRepository].Agents.Count})")
                }
                else
                {
                    <text>Select Repository</text>
                }
            </button>
            <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="repositoryDropdown">
                @if (Repositories != null)
                {
                    @foreach (var repo in Repositories)
                    {
                        <li>
                            <a class="dropdown-item @(SelectedRepository == repo.Key ? "active" : "")"
                               href="#" @onclick="() => OnRepositorySelected(repo.Key)" @onclick:preventDefault="true">
                                @repo.Key (@repo.Value.Agents.Count)
                            </a>
                        </li>
                    }
                }
            </ul>
        </div>
        <button class="btn btn-outline-secondary btn-sm" @onclick="OnRefresh">
            <i class="bi bi-arrow-clockwise"></i> Refresh
        </button>
    </div>

    @if (!string.IsNullOrEmpty(SelectedRepository) && Repositories != null && Repositories.ContainsKey(SelectedRepository))
    {
        var activeRepo = Repositories[SelectedRepository];
        <div class="repository-info">
            <div class="repository-header">
                <h3>üèõÔ∏è @activeRepo.Name Repository</h3>
                <div class="repo-stats">
                    <span class="stat-item">üü¢ @activeRepo.IdleCount</span>
                    <span class="stat-item">üü° @activeRepo.WorkingCount</span>
                    <span class="stat-item">üî¥ @activeRepo.ErrorCount</span>
                    <span class="stat-item">‚ö´ @activeRepo.OfflineCount</span>
                </div>
            </div>
            <div class="repository-path">
                <small class="text-muted">üìÅ @activeRepo.Path</small>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Dictionary<string, RepositoryInfo>? Repositories { get; set; }
    [Parameter] public string? SelectedRepository { get; set; }
    [Parameter] public EventCallback<string> OnRepositoryChanged { get; set; }
    [Parameter] public EventCallback OnRefreshRequested { get; set; }

    private async Task OnRepositorySelected(string repositoryName)
    {
        await OnRepositoryChanged.InvokeAsync(repositoryName);
    }

    private async Task OnRefresh()
    {
        await OnRefreshRequested.InvokeAsync();
    }
}