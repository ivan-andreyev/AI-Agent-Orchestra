@using Orchestra.Web.Models

<div class="repository-selector stable-container">
    <h2>Repository Context</h2>

    <div class="d-flex align-items-center gap-3">
        @if (Repositories == null)
        {
            <!-- Skeleton loading -->
            <div class="skeleton skeleton-dropdown"></div>
            <div class="skeleton skeleton-button"></div>
        }
        else
        {
            <div class="dropdown">
                <button class="btn btn-success dropdown-toggle" type="button" id="repositoryDropdown"
                        data-bs-toggle="dropdown" aria-expanded="false" style="width: 250px; text-align: left;">
                    @GetRepositoryIcon() @GetRepositoryText() @GetRepositoryCount()
                    @if (IsLoading)
                    {
                        <span class="spinner-border spinner-border-sm ms-2" role="status" aria-hidden="true"></span>
                    }
                </button>
                <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="repositoryDropdown">
                    @if (Repositories.Count > 0)
                    {
                        @foreach (var repo in Repositories)
                        {
                            <li>
                                <a class="dropdown-item @(SelectedRepository == repo.Key ? "active" : "")"
                                   href="#" @onclick="() => OnRepositorySelected(repo.Key)" @onclick:preventDefault="true">
                                    @if (SelectedRepository == repo.Key)
                                    {
                                        <span class="me-2">üéØ</span>
                                    }
                                    else
                                    {
                                        <span class="me-2">üìÇ</span>
                                    }
                                    @repo.Key (@repo.Value.Agents.Count)
                                </a>
                            </li>
                        }
                    }
                    else
                    {
                        <li>
                            <span class="dropdown-item-text text-muted">No repositories found</span>
                        </li>
                    }
                </ul>
            </div>
            <button class="btn btn-outline-secondary btn-sm" @onclick="OnRefresh" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
                else
                {
                    <span>üîÑ</span>
                }
                <span class="ms-1">Refresh</span>
            </button>
        }
    </div>

    @if (!string.IsNullOrEmpty(SelectedRepository) && Repositories != null && Repositories.ContainsKey(SelectedRepository))
    {
        var activeRepo = Repositories[SelectedRepository];
        <div class="repository-info content-fade-in">
            <div class="repository-header">
                <h3>üèõÔ∏è @activeRepo.Name Repository</h3>
                <div class="repo-stats">
                    <span class="stat-item">üü¢ @activeRepo.IdleCount</span>
                    <span class="stat-item">üü° @activeRepo.WorkingCount</span>
                    <span class="stat-item">üî¥ @activeRepo.ErrorCount</span>
                    <span class="stat-item">‚ö´ @activeRepo.OfflineCount</span>
                </div>
            </div>
            <div class="repository-path">
                <small class="text-muted">üìÅ @activeRepo.Path</small>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Dictionary<string, RepositoryInfo>? Repositories { get; set; }
    [Parameter] public string? SelectedRepository { get; set; }
    [Parameter] public EventCallback<string> OnRepositoryChanged { get; set; }
    [Parameter] public EventCallback OnRefreshRequested { get; set; }
    [Parameter] public bool IsLoading { get; set; } = false;

    private async Task OnRepositorySelected(string repositoryName)
    {
        await OnRepositoryChanged.InvokeAsync(repositoryName);
    }

    private async Task OnRefresh()
    {
        await OnRefreshRequested.InvokeAsync();
    }

    private string GetRepositoryIcon()
    {
        if (!string.IsNullOrEmpty(SelectedRepository) && Repositories != null && Repositories.ContainsKey(SelectedRepository))
            return "üéØ";
        else if (!string.IsNullOrEmpty(SelectedRepository))
            return "‚ö†Ô∏è";
        else
            return "üìÇ";
    }

    private string GetRepositoryText()
    {
        if (!string.IsNullOrEmpty(SelectedRepository))
            return SelectedRepository;
        else if (Repositories != null && Repositories.Count > 0)
            return "Select Repository";
        else
            return "No repositories";
    }

    private string GetRepositoryCount()
    {
        if (!string.IsNullOrEmpty(SelectedRepository) && Repositories != null && Repositories.ContainsKey(SelectedRepository))
            return $"({Repositories[SelectedRepository].Agents.Count})";
        else
            return "";
    }
}