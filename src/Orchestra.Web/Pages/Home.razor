@page "/"
@using Orchestra.Web.Models
@using Orchestra.Web.Services
@inject OrchestratorService OrchestratorService
@implements IDisposable

<PageTitle>AI Agent Orchestra</PageTitle>

<div class="dashboard">
    <div class="header">
        <h1>🎼 AI Agent Orchestra</h1>
        <div class="status-indicator @(_isConnected ? "connected" : "disconnected")">
            @(_isConnected ? "🟢 Connected" : "🔴 Disconnected")
        </div>
    </div>

    @if (_state != null)
    {
        <div class="stats-row">
            <div class="stat-card">
                <h3>Total Agents</h3>
                <div class="stat-number">@(_repositories?.Values.Sum(r => r.Agents.Count) ?? _state.Agents.Count)</div>
                <div class="stat-detail">
                    🟢 @(_repositories?.Values.Sum(r => r.IdleCount) ?? _state.Agents.Values.Count(a => a.Status == AgentStatus.Idle))
                    🟡 @(_repositories?.Values.Sum(r => r.WorkingCount) ?? _state.Agents.Values.Count(a => a.Status == AgentStatus.Working))
                    🔴 @(_repositories?.Values.Sum(r => r.ErrorCount) ?? _state.Agents.Values.Count(a => a.Status == AgentStatus.Error))
                    ⚫ @(_repositories?.Values.Sum(r => r.OfflineCount) ?? _state.Agents.Values.Count(a => a.Status == AgentStatus.Offline))
                </div>
            </div>

            <div class="stat-card">
                <h3>Repositories</h3>
                <div class="stat-number">@(_repositories?.Count ?? 0)</div>
                <div class="stat-detail">Active repositories</div>
            </div>

            <div class="stat-card">
                <h3>Tasks Queue</h3>
                <div class="stat-number">@(_state?.TaskQueue.Count ?? 0)</div>
                <div class="stat-detail">Pending tasks</div>
            </div>

            <div class="stat-card">
                <h3>Last Update</h3>
                <div class="stat-detail">@(_state?.LastUpdate.ToString("HH:mm:ss") ?? "--")</div>
            </div>
        </div>

        <div class="repository-tabs">
            @if (_repositories != null)
            {
                @foreach (var repo in _repositories)
                {
                    <button class="tab-button @(_activeTab == repo.Key ? "active" : "")"
                            @onclick="() => _activeTab = repo.Key">
                        @repo.Key (@repo.Value.Agents.Count)
                    </button>
                }
            }
            <button class="refresh-button" @onclick="RefreshAgents">🔄 Refresh</button>
        </div>

        @if (!string.IsNullOrEmpty(_activeTab) && _repositories != null && _repositories.ContainsKey(_activeTab))
        {
            var activeRepo = _repositories[_activeTab];
            <div class="repository-content">
                <div class="repository-header">
                    <h2>@activeRepo.Name Repository</h2>
                    <div class="repo-stats">
                        🟢 @activeRepo.IdleCount
                        🟡 @activeRepo.WorkingCount
                        🔴 @activeRepo.ErrorCount
                        ⚫ @activeRepo.OfflineCount
                    </div>
                </div>

                <div class="agents-section">
                    <div class="agents-controls">
                        <div class="filter-controls">
                            <label for="statusFilter">Filter by status:</label>
                            <select id="statusFilter" @bind="_statusFilter" @onchange="OnStatusFilterChanged" class="status-filter">
                                <option value="">All</option>
                                <option value="Working">🟡 Working</option>
                                <option value="Idle">🟢 Idle</option>
                                <option value="Error">🔴 Error</option>
                                <option value="Offline">⚫ Offline</option>
                            </select>
                        </div>
                        <div class="sort-controls">
                            <label for="sortBy">Sort by:</label>
                            <select id="sortBy" @bind="_sortBy" @onchange="OnSortChanged" class="sort-select">
                                <option value="Status">Status (Active first)</option>
                                <option value="LastPing">Last activity</option>
                                <option value="Name">Name</option>
                            </select>
                        </div>
                    </div>
                    @if (GetFilteredAndSortedAgents(activeRepo.Agents).Any())
                    {
                        <div class="agents-grid">
                            @foreach (var agent in GetFilteredAndSortedAgents(activeRepo.Agents))
                            {
                                <div class="agent-card @agent.Status.ToString().ToLower()">
                                    <div class="agent-header">
                                        <span class="agent-name">@agent.Name</span>
                                        <span class="agent-status">@GetStatusIcon(agent.Status) @agent.Status</span>
                                    </div>
                                    <div class="agent-details">
                                        <div class="agent-type">@agent.Type</div>
                                        @if (!string.IsNullOrEmpty(agent.SessionId))
                                        {
                                            <div class="agent-session">Session: @agent.SessionId[..8]...</div>
                                        }
                                        @if (!string.IsNullOrEmpty(agent.CurrentTask))
                                        {
                                            <div class="agent-task">⚡ @agent.CurrentTask</div>
                                        }
                                        <div class="agent-ping">Last ping: @agent.LastPing.ToString("HH:mm:ss")</div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="empty-state">
                            @if (string.IsNullOrEmpty(_statusFilter))
                            {
                                <span>No agents found in this repository</span>
                            }
                            else
                            {
                                <span>No @_statusFilter.ToLower() agents found in this repository</span>
                            }
                        </div>
                    }
                </div>
            </div>
        }

        @if (_state?.TaskQueue.Any() == true)
        {
            <div class="tasks-section">
                <h2>Task Queue</h2>
                <div class="tasks-list">
                    @foreach (var task in _state.TaskQueue.Take(5))
                    {
                        <div class="task-item priority-@task.Priority.ToString().ToLower()">
                            <div class="task-command">@task.Command</div>
                            <div class="task-meta">
                                <span class="task-agent">→ @task.AgentId</span>
                                <span class="task-priority">@task.Priority</span>
                                <span class="task-time">@task.CreatedAt.ToString("HH:mm:ss")</span>
                            </div>
                        </div>
                    }
                    @if (_state.TaskQueue.Count > 5)
                    {
                        <div class="more-tasks">... and @(_state.TaskQueue.Count - 5) more tasks</div>
                    }
                </div>
            </div>
        }

        <div class="debug-section" style="margin-bottom: 20px; padding: 15px; background: #2d1b1b; border-radius: 8px;">
            <h3>Debug API Connection</h3>
            <button @onclick="TestConnection" class="test-button" style="margin-right: 10px;">Test API Connection</button>
            <span>@_debugMessage</span>
        </div>

        <div class="quick-actions">
            <h2>Quick Actions</h2>
            <div class="action-form">
                <input @bind="_newTaskCommand" placeholder="Enter task command..." class="task-input" />
                <select @bind="_newTaskRepo" class="repo-select">
                    <option value="">Select repository...</option>
                    @if (_repositories != null)
                    {
                        @foreach (var repo in _repositories)
                        {
                            <option value="@repo.Value.Path">@repo.Key</option>
                        }
                    }
                </select>
                <select @bind="_newTaskPriority" class="priority-select">
                    <option value="Low">Low</option>
                    <option value="Normal">Normal</option>
                    <option value="High">High</option>
                    <option value="Critical">Critical</option>
                </select>
                <button @onclick="AddTask" disabled="@_isAddingTask" class="add-button">
                    @(_isAddingTask ? "Adding..." : "Add Task")
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="loading">Loading orchestra state...</div>
    }
</div>

@code {
    private OrchestratorState? _state;
    private Dictionary<string, RepositoryInfo>? _repositories;
    private bool _isConnected = false;
    private Timer? _refreshTimer;
    private string _activeTab = "";

    private string _newTaskCommand = "";
    private string _newTaskRepo = "";
    private TaskPriority _newTaskPriority = TaskPriority.Normal;
    private bool _isAddingTask = false;
    private string _debugMessage = "";

    // Filtering and sorting
    private string _statusFilter = "";
    private string _sortBy = "Status";

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
        _refreshTimer = new Timer(async _ => await InvokeAsync(RefreshData), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
    }

    private async Task RefreshData()
    {
        try
        {
            _state = await OrchestratorService.GetStateAsync();
            _repositories = await OrchestratorService.GetRepositoriesAsync();
            _isConnected = _state != null && _repositories != null;

            // Set first repository as active tab if none selected
            if (string.IsNullOrEmpty(_activeTab) && _repositories?.Count > 0)
            {
                _activeTab = _repositories.Keys.First();
            }
        }
        catch
        {
            _isConnected = false;
        }
        StateHasChanged();
    }

    private async Task AddTask()
    {
        if (string.IsNullOrWhiteSpace(_newTaskCommand) || string.IsNullOrWhiteSpace(_newTaskRepo))
            return;

        _isAddingTask = true;
        var success = await OrchestratorService.QueueTaskAsync(_newTaskCommand, _newTaskRepo, _newTaskPriority);

        if (success)
        {
            _newTaskCommand = "";
            _newTaskRepo = "";
            _newTaskPriority = TaskPriority.Normal;
            await RefreshData();
        }

        _isAddingTask = false;
    }

    private string GetStatusIcon(AgentStatus status) => status switch
    {
        AgentStatus.Idle => "🟢",
        AgentStatus.Working => "🟡",
        AgentStatus.Error => "🔴",
        AgentStatus.Offline => "⚫",
        _ => "❓"
    };

    private async Task TestConnection()
    {
        _debugMessage = "Testing connection...";
        StateHasChanged();

        try
        {
            var ping = await OrchestratorService.PingAsync();
            if (ping)
            {
                _debugMessage = "✅ API connection successful!";
                await RefreshData();
            }
            else
            {
                _debugMessage = "❌ API connection failed - no response";
            }
        }
        catch (Exception ex)
        {
            _debugMessage = $"❌ Connection error: {ex.Message}";
        }

        StateHasChanged();
    }

    private async Task RefreshAgents()
    {
        _debugMessage = "Refreshing agents...";
        StateHasChanged();

        try
        {
            var success = await OrchestratorService.RefreshAgentsAsync();
            if (success)
            {
                _debugMessage = "✅ Agents refreshed successfully!";
                await RefreshData();
            }
            else
            {
                _debugMessage = "❌ Failed to refresh agents";
            }
        }
        catch (Exception ex)
        {
            _debugMessage = $"❌ Error refreshing agents: {ex.Message}";
        }

        StateHasChanged();
    }

    private List<AgentInfo> GetFilteredAndSortedAgents(List<AgentInfo> agents)
    {
        // Apply filter
        var filtered = agents;
        if (!string.IsNullOrEmpty(_statusFilter))
        {
            if (Enum.TryParse<AgentStatus>(_statusFilter, out var status))
            {
                filtered = agents.Where(a => a.Status == status).ToList();
            }
        }

        // Apply sorting
        return _sortBy switch
        {
            "Status" => filtered.OrderBy(a => GetStatusPriority(a.Status)).ThenByDescending(a => a.LastPing).ToList(),
            "LastPing" => filtered.OrderByDescending(a => a.LastPing).ToList(),
            "Name" => filtered.OrderBy(a => a.Name).ToList(),
            _ => filtered.OrderBy(a => GetStatusPriority(a.Status)).ThenByDescending(a => a.LastPing).ToList()
        };
    }

    private int GetStatusPriority(AgentStatus status) => status switch
    {
        AgentStatus.Working => 1,
        AgentStatus.Idle => 2,
        AgentStatus.Error => 3,
        AgentStatus.Offline => 4,
        _ => 5
    };

    private async Task OnStatusFilterChanged(ChangeEventArgs e)
    {
        _statusFilter = e.Value?.ToString() ?? "";
        StateHasChanged();
    }

    private async Task OnSortChanged(ChangeEventArgs e)
    {
        _sortBy = e.Value?.ToString() ?? "Status";
        StateHasChanged();
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }
}
