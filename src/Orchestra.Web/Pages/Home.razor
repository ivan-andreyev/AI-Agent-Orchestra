@page "/"
@using Orchestra.Web.Models
@using Orchestra.Web.Services
@using Orchestra.Web.Components
@inject OrchestratorService OrchestratorService
@implements IDisposable

<PageTitle>AI Agent Orchestra</PageTitle>

<div class="dashboard">
    <div class="header">
        <h1>🎼 AI Agent Orchestra</h1>
        <div class="status-indicator @(_isConnected ? "connected" : "disconnected")">
            @(_isConnected ? "🟢 Connected" : "🔴 Disconnected")
        </div>
    </div>

    @if (_state != null)
    {
        <div class="stats-row">
            <div class="stat-card">
                <h3>Total Agents</h3>
                <div class="stat-number">@(_repositories?.Values.Sum(r => r.Agents.Count) ?? _state.Agents.Count)</div>
                <div class="stat-detail">
                    🟢 @(_repositories?.Values.Sum(r => r.IdleCount) ?? _state.Agents.Values.Count(a => a.Status == AgentStatus.Idle))
                    🟡 @(_repositories?.Values.Sum(r => r.WorkingCount) ?? _state.Agents.Values.Count(a => a.Status == AgentStatus.Working))
                    🔴 @(_repositories?.Values.Sum(r => r.ErrorCount) ?? _state.Agents.Values.Count(a => a.Status == AgentStatus.Error))
                    ⚫ @(_repositories?.Values.Sum(r => r.OfflineCount) ?? _state.Agents.Values.Count(a => a.Status == AgentStatus.Offline))
                </div>
            </div>

            <div class="stat-card">
                <h3>Repositories</h3>
                <div class="stat-number">@(_repositories?.Count ?? 0)</div>
                <div class="stat-detail">Active repositories</div>
            </div>

            <div class="stat-card">
                <h3>Tasks Queue</h3>
                <div class="stat-number">@(_state?.TaskQueue.Count ?? 0)</div>
                <div class="stat-detail">Pending tasks</div>
            </div>

            <div class="stat-card">
                <h3>Last Update</h3>
                <div class="stat-detail">@(_state?.LastUpdate.ToString("HH:mm:ss") ?? "--")</div>
            </div>
        </div>

        <RepositorySelector Repositories="_repositories"
                           SelectedRepository="_selectedRepository"
                           OnRepositoryChanged="OnRepositoryChanged"
                           OnRefreshRequested="OnRefreshRequested" />

        <DebugPanel OnDataRefresh="OnDataRefreshRequested" />

        <QuickActions SelectedRepository="_selectedRepository"
                     RepositoryPath="@GetSelectedRepositoryPath()"
                     OnTaskQueued="OnTaskQueued" />

        <div class="main-layout">
            <div class="sidebar">
                <AgentSidebar Agents="@GetSelectedRepositoryAgents()"
                             SelectedAgentId="_selectedAgentId"
                             OnAgentSelected="OnAgentSelected" />
            </div>

            <div class="main-content">
                <div class="content-panels">
                    <div class="history-panel">
                        <AgentHistory SelectedAgentId="@GetSelectedAgentSessionId()" />
                    </div>
                    <div class="queue-panel">
                        <TaskQueue SelectedRepository="_selectedRepository"
                                  RepositoryPath="@GetSelectedRepositoryPath()" />
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="loading">Loading orchestra state...</div>
    }
</div>

@code {
    private OrchestratorState? _state;
    private Dictionary<string, RepositoryInfo>? _repositories;
    private bool _isConnected = false;
    private Timer? _refreshTimer;
    private string _selectedRepository = "";
    private string _selectedAgentId = "";

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
        _refreshTimer = new Timer(async _ => await InvokeAsync(RefreshData), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
    }

    private async Task RefreshData()
    {
        try
        {
            _state = await OrchestratorService.GetStateAsync();
            _repositories = await OrchestratorService.GetRepositoriesAsync();
            _isConnected = _state != null && _repositories != null;

            // Set first repository as selected if none selected
            if (string.IsNullOrEmpty(_selectedRepository) && _repositories?.Count > 0)
            {
                _selectedRepository = _repositories.Keys.First();
            }
        }
        catch
        {
            _isConnected = false;
        }
        StateHasChanged();
    }

    private async Task OnRepositoryChanged(string repositoryName)
    {
        _selectedRepository = repositoryName;
        _selectedAgentId = ""; // Clear selected agent when repository changes
        StateHasChanged();
    }

    private async Task OnRefreshRequested()
    {
        await RefreshData();
    }

    private async Task OnDataRefreshRequested()
    {
        await RefreshData();
    }

    private async Task OnTaskQueued()
    {
        await RefreshData();
    }

    private async Task OnAgentSelected(string agentId)
    {
        _selectedAgentId = agentId;
        StateHasChanged();
    }

    private List<AgentInfo>? GetSelectedRepositoryAgents()
    {
        if (string.IsNullOrEmpty(_selectedRepository) || _repositories == null)
            return null;

        return _repositories.ContainsKey(_selectedRepository)
            ? _repositories[_selectedRepository].Agents
            : null;
    }

    private string? GetSelectedRepositoryPath()
    {
        if (string.IsNullOrEmpty(_selectedRepository) || _repositories == null)
            return null;

        return _repositories.ContainsKey(_selectedRepository)
            ? _repositories[_selectedRepository].Path
            : null;
    }

    private string? GetSelectedAgentSessionId()
    {
        if (string.IsNullOrEmpty(_selectedAgentId) || _repositories == null)
            return null;

        var agent = _repositories.Values
            .SelectMany(r => r.Agents)
            .FirstOrDefault(a => a.Id == _selectedAgentId);

        return agent?.SessionId;
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }
}
