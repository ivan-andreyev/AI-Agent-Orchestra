@page "/"
@using Orchestra.Web.Models
@using Orchestra.Web.Services
@using Orchestra.Web.Components
@using System.Text.Json
@inject MonitoredOrchestratorService OrchestratorService
@inject PerformanceMonitoringService PerformanceService
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>AI Agent Orchestra</PageTitle>

<div class="dashboard">
    <div class="header">
        <h1>🎼 AI Agent Orchestra</h1>

        @if (_state != null)
        {
            <div class="header-stats">
                <div class="stat-inline">
                    <span class="stat-value">@GetTotalAgentsCount()</span>
                    <span class="stat-label">Agents</span>
                </div>
                <div class="agent-status-breakdown">
                    <div class="status-item status-working">
                        <span class="status-icon">🟢</span>
                        <span class="status-count">@GetWorkingAgentsCount()</span>
                    </div>
                    <div class="status-item status-idle">
                        <span class="status-icon">🟡</span>
                        <span class="status-count">@GetIdleAgentsCount()</span>
                    </div>
                    <div class="status-item status-error">
                        <span class="status-icon">🔴</span>
                        <span class="status-count">@GetErrorAgentsCount()</span>
                    </div>
                    <div class="status-item status-offline">
                        <span class="status-icon">⚫</span>
                        <span class="status-count">@GetOfflineAgentsCount()</span>
                    </div>
                </div>
                <div class="stat-inline">
                    <span class="stat-value">@(_repositories?.Count ?? 0)</span>
                    <span class="stat-label">Repos</span>
                </div>
                <div class="stat-inline">
                    <span class="stat-value">@(_state?.TaskQueue.Count ?? 0)</span>
                    <span class="stat-label">Tasks</span>
                </div>
            </div>
        }

        <div class="header-controls">
            <!-- CSS Framework Test Element (Task 3B.0.3-B) -->
            <div class="test-css-verification">CSS Framework compatibility verified</div>
            <div class="status-indicator @(_isConnected ? "connected" : "disconnected")">
                @(_isConnected ? "🟢 Connected" : "🔴 Disconnected")
            </div>
            <div class="header-debug">
                <button class="debug-button" @onclick="OnDataRefreshRequested">
                    🔄 Refresh Data
                </button>
            </div>
        </div>
    </div>

    @if (_state != null)
    {

        <!-- Bootstrap Grid Phase 1 Implementation: Replace main-layout with container-fluid and row -->
        <div class="container-fluid" data-bs-theme="dark">
            <div class="row g-3 vh-100" style="margin-top: var(--gap-size);">
                <!-- Enhanced Sidebar per Design Specifications -->
                <div class="col-md-3 enhanced-sidebar sidebar">
                    <!-- Repository Context Section -->
                    <div class="sidebar-section repository-context sidebar-compact">
                        <RepositorySelector Repositories="@_repositories"
                                           SelectedRepository="@_selectedRepository"
                                           OnRepositoryChanged="OnRepositoryChanged"
                                           OnRefreshRequested="OnRefreshRequested"
                                           IsLoading="@_isRefreshing" />
                    </div>

                    <!-- Orchestration Control Panel Section (Actions Block Refactoring Phase 1) -->
                    <div class="sidebar-section orchestration-control-section sidebar-compact">
                        <OrchestrationControlPanel SelectedRepository="@_selectedRepository"
                                                 RepositoryPath="@GetSelectedRepositoryPath()"
                                                 Repositories="@_repositories"
                                                 OnTaskQueued="OnTaskQueued" />
                    </div>

                    <!-- Agent List Section -->
                    <div class="sidebar-section agent-list-section">
                        <AgentSidebar Agents="@GetSelectedRepositoryAgents()"
                                     SelectedAgentId="_selectedAgentId"
                                     OnAgentSelected="OnAgentSelected" />
                    </div>

                    <!-- Performance Monitoring Section (Phase 0.2) -->
                    <!-- Bootstrap Phase 2: Replace performance-monitoring-section with Bootstrap card -->
                    <div class="sidebar-section">
                        <div class="card bg-dark border-primary" data-bs-theme="dark">
                            <div class="card-header bg-primary bg-opacity-10">
                                <h6 class="card-subtitle mb-0 text-primary">Performance Monitor</h6>
                            </div>
                            <div class="card-body p-2">
                                <PerformanceMonitor />
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Enhanced Main Content per Design Specifications -->
                <div class="col-md-9 enhanced-main-content main-content">
                    <!-- Bootstrap Grid Phase 1 Implementation: Replace content-panels with row -->
                    <div class="row g-3">
                        <div class="col-12 mb-3">
                            <div class="content-panel history-panel">
                                <AgentHistory SelectedAgentId="@GetSelectedAgentSessionId()" />
                            </div>
                        </div>
                        <div class="col-12 mb-3">
                            <div class="content-panel queue-panel">
                                <TaskQueue SelectedRepository="@_selectedRepository"
                                          RepositoryPath="@GetSelectedRepositoryPath()" />
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="content-panel coordinator-panel">
                                <CoordinatorChat />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="loading">Loading orchestra state...</div>
    }
</div>

@code {
    private OrchestratorState? _state;
    private Dictionary<string, RepositoryInfo>? _repositories;
    private bool _isConnected = false;
    private bool _isRefreshing = false;
    private Timer? _refreshTimer;
    private string _selectedRepository = "";
    private string _selectedAgentId = "";

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
        _refreshTimer = new Timer(async _ => await InvokeAsync(RefreshData), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
    }

    private async Task RefreshData()
    {
        _isRefreshing = true;
        StateHasChanged(); // Update UI to show loading state

        try
        {
            _state = await OrchestratorService.GetStateAsync();
            _repositories = await OrchestratorService.GetRepositoriesAsync();
            _isConnected = _state != null && _repositories != null;

            // Validate and correct selected repository state
            if (_repositories?.Count > 0)
            {
                // If no repository selected, select the first one
                if (string.IsNullOrEmpty(_selectedRepository))
                {
                    _selectedRepository = _repositories.Keys.First();
                }
                // If selected repository no longer exists, select the first available one
                else if (!_repositories.ContainsKey(_selectedRepository))
                {
    #if DEBUG
                Console.WriteLine($"Home: Selected repository '{_selectedRepository}' no longer exists. Available: {string.Join(", ", _repositories.Keys)}");
#endif
                    _selectedRepository = _repositories.Keys.First();
                }
            }
            else if (_repositories?.Count == 0)
            {
                // No repositories available, clear selection
                _selectedRepository = "";
            }
        }
        catch
        {
            _isConnected = false;
        }
        finally
        {
            _isRefreshing = false;
            StateHasChanged(); // Update UI to hide loading state
        }
    }

    private Task OnRepositoryChanged(string repositoryName)
    {
        var startTime = DateTime.UtcNow;

        _selectedRepository = repositoryName;
        _selectedAgentId = ""; // Clear selected agent when repository changes

        // Force immediate UI update for all dependent components
        StateHasChanged();

        var endTime = DateTime.UtcNow;
        var duration = endTime - startTime;

#if DEBUG
        Console.WriteLine($"Repository changed to '{repositoryName}' - Update duration: {duration.TotalMilliseconds:F2}ms");
        Console.WriteLine($"Repository switching performance: {(duration.TotalSeconds < 2 ? "✅ PASS" : "❌ FAIL")} - {duration.TotalSeconds:F3}s (target: <2s)");
#endif

        return Task.CompletedTask;
    }

    private async Task OnRefreshRequested()
    {
        await RefreshData();
    }

    private async Task OnDataRefreshRequested()
    {
        await RefreshData();
    }

    private async Task OnTaskQueued()
    {
        await RefreshData();
    }


    private Task OnAgentSelected(string agentId)
    {
        _selectedAgentId = agentId;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private List<AgentInfo>? GetSelectedRepositoryAgents()
    {
        var startTime = DateTime.UtcNow;

        if (string.IsNullOrEmpty(_selectedRepository) || _repositories == null)
            return null;

        var result = _repositories.ContainsKey(_selectedRepository)
            ? _repositories[_selectedRepository].Agents
            : null;

        var duration = DateTime.UtcNow - startTime;
#if DEBUG
        if (duration.TotalMilliseconds > 10) // Only log if it takes more than 10ms
        {
            Console.WriteLine($"GetSelectedRepositoryAgents() took {duration.TotalMilliseconds:F2}ms for repository '{_selectedRepository}'");
        }
#endif

        return result;
    }

    private string? GetSelectedRepositoryPath()
    {
        var startTime = DateTime.UtcNow;

        if (string.IsNullOrEmpty(_selectedRepository) || _repositories == null)
            return null;

        var result = _repositories.ContainsKey(_selectedRepository)
            ? _repositories[_selectedRepository].Path
            : null;

        var duration = DateTime.UtcNow - startTime;
#if DEBUG
        if (duration.TotalMilliseconds > 5) // Only log if it takes more than 5ms
        {
            Console.WriteLine($"GetSelectedRepositoryPath() took {duration.TotalMilliseconds:F2}ms for repository '{_selectedRepository}'");
        }
#endif

        return result;
    }

    private string? GetSelectedAgentSessionId()
    {
        if (string.IsNullOrEmpty(_selectedAgentId) || _repositories == null)
            return null;

        var agent = _repositories.Values
            .SelectMany(r => r.Agents)
            .FirstOrDefault(a => a.Id == _selectedAgentId);

        return agent?.SessionId;
    }

    // Performance-monitored statistics calculation methods (Phase 0.2 implementation)
    private int GetTotalAgentsCount()
    {
        return OrchestratorService.MeasureStatisticsCalculation(() =>
        {
            // Priority: Use repositories data if available, fallback to state data
            if (_repositories != null && _repositories.Count > 0)
            {
                return _repositories.Values.Sum(r => r.Agents.Count);
            }
            if (_state?.Agents != null)
            {
                return _state.Agents.Count;
            }
            return 0;
        },
        "total_agents_count"
        );
    }

    private int GetWorkingAgentsCount()
    {
        return OrchestratorService.MeasureStatisticsCalculation(() =>
            _repositories?.Values.Sum(r => r.WorkingCount) ?? _state?.Agents.Values.Count(a => a.Status == AgentStatus.Working) ?? 0,
            "working_agents_count"
        );
    }

    private int GetIdleAgentsCount()
    {
        return OrchestratorService.MeasureStatisticsCalculation(() =>
            _repositories?.Values.Sum(r => r.IdleCount) ?? _state?.Agents.Values.Count(a => a.Status == AgentStatus.Idle) ?? 0,
            "idle_agents_count"
        );
    }

    private int GetErrorAgentsCount()
    {
        return OrchestratorService.MeasureStatisticsCalculation(() =>
            _repositories?.Values.Sum(r => r.ErrorCount) ?? _state?.Agents.Values.Count(a => a.Status == AgentStatus.Error) ?? 0,
            "error_agents_count"
        );
    }

    private int GetOfflineAgentsCount()
    {
        return OrchestratorService.MeasureStatisticsCalculation(() =>
            _repositories?.Values.Sum(r => r.OfflineCount) ?? _state?.Agents.Values.Count(a => a.Status == AgentStatus.Offline) ?? 0,
            "offline_agents_count"
        );
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }
}

