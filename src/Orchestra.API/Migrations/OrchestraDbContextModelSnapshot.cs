// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Orchestra.Core.Data;

#nullable disable

namespace Orchestra.API.Migrations
{
    [DbContext(typeof(OrchestraDbContext))]
    partial class OrchestraDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Orchestra.Core.Data.Entities.Agent", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<double>("AverageExecutionTime")
                        .HasColumnType("double precision");

                    b.Property<string>("ConfigurationJson")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentTask")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("HealthCheckInterval")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastPing")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxConcurrentTasks")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RepositoryId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("RepositoryPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("TotalExecutionTime")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalTasksCompleted")
                        .HasColumnType("integer");

                    b.Property<int>("TotalTasksFailed")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("RepositoryPath");

                    b.HasIndex("SessionId");

                    b.HasIndex("Status");

                    b.HasIndex("Status", "RepositoryPath");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Orchestra.Core.Data.Entities.OrchestrationLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("text");

                    b.Property<string>("AgentId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RepositoryId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TaskId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("EventType");

                    b.HasIndex("Level");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("AgentId", "CreatedAt");

                    b.HasIndex("TaskId", "CreatedAt");

                    b.ToTable("OrchestrationLogs");
                });

            modelBuilder.Entity("Orchestra.Core.Data.Entities.PerformanceMetric", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("MeasuredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("MeasuredAt");

                    b.HasIndex("MetricName");

                    b.HasIndex("AgentId", "MetricName", "MeasuredAt");

                    b.ToTable("PerformanceMetrics");
                });

            modelBuilder.Entity("Orchestra.Core.Data.Entities.Repository", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.PrimitiveCollection<List<string>>("AllowedOperations")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("AllowedOperationsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultBranch")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("FailedTasks")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("SettingsJson")
                        .HasColumnType("text");

                    b.Property<int>("SuccessfulTasks")
                        .HasColumnType("integer");

                    b.Property<long>("TotalExecutionTime")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalTasks")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.HasIndex("Type");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("Orchestra.Core.Data.Entities.TaskRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("AgentId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<long?>("ExecutionDuration")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentTaskId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("RepositoryId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("RepositoryPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WorkflowId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("WorkflowStep")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CorrelationId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("Status");

                    b.HasIndex("WorkflowId");

                    b.HasIndex("AgentId", "Status");

                    b.HasIndex("Status", "Priority");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Orchestra.Core.Data.Entities.TaskTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CommandTemplate")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefaultPriority")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ParametersJson")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.ToTable("TaskTemplates");
                });

            modelBuilder.Entity("Orchestra.Core.Data.Entities.UserPreference", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RepositoryId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("UserId", "Type");

                    b.HasIndex("UserId", "Key", "RepositoryId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("Orchestra.Core.Data.Entities.WorkflowDefinition", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefinitionJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("Name", "Version");

                    b.ToTable("WorkflowDefinitions");
                });

            modelBuilder.Entity("Orchestra.Core.Models.Chat.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MessageType")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SessionId");

                    b.HasIndex("SessionId", "CreatedAt");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Orchestra.Core.Models.Chat.ChatSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InstanceId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("LastMessageAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("LastMessageAt");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "InstanceId");

                    b.ToTable("ChatSessions");
                });

            modelBuilder.Entity("Orchestra.Core.Data.Entities.Agent", b =>
                {
                    b.HasOne("Orchestra.Core.Data.Entities.Repository", "Repository")
                        .WithMany("Agents")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("Orchestra.Core.Data.Entities.OrchestrationLog", b =>
                {
                    b.HasOne("Orchestra.Core.Data.Entities.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Orchestra.Core.Data.Entities.Repository", "Repository")
                        .WithMany()
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Orchestra.Core.Data.Entities.TaskRecord", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Agent");

                    b.Navigation("Repository");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Orchestra.Core.Data.Entities.PerformanceMetric", b =>
                {
                    b.HasOne("Orchestra.Core.Data.Entities.Agent", "Agent")
                        .WithMany("PerformanceMetrics")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Orchestra.Core.Data.Entities.TaskRecord", b =>
                {
                    b.HasOne("Orchestra.Core.Data.Entities.Agent", "Agent")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Orchestra.Core.Data.Entities.TaskRecord", "ParentTask")
                        .WithMany("ChildTasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Orchestra.Core.Data.Entities.Repository", "Repository")
                        .WithMany("Tasks")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Orchestra.Core.Data.Entities.WorkflowDefinition", "Workflow")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Agent");

                    b.Navigation("ParentTask");

                    b.Navigation("Repository");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Orchestra.Core.Data.Entities.UserPreference", b =>
                {
                    b.HasOne("Orchestra.Core.Data.Entities.Repository", "Repository")
                        .WithMany("UserPreferences")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("Orchestra.Core.Models.Chat.ChatMessage", b =>
                {
                    b.HasOne("Orchestra.Core.Models.Chat.ChatSession", "Session")
                        .WithMany("Messages")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Orchestra.Core.Data.Entities.Agent", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("PerformanceMetrics");
                });

            modelBuilder.Entity("Orchestra.Core.Data.Entities.Repository", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("Tasks");

                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("Orchestra.Core.Data.Entities.TaskRecord", b =>
                {
                    b.Navigation("ChildTasks");
                });

            modelBuilder.Entity("Orchestra.Core.Data.Entities.WorkflowDefinition", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Orchestra.Core.Models.Chat.ChatSession", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
