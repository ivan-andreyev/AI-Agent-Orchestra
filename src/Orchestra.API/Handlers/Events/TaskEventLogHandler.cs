using MediatR;
using Orchestra.Core.Events.Tasks;

namespace Orchestra.API.Handlers.Events;

/// <summary>
/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∑–∞–¥–∞—á –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
/// </summary>
public class TaskEventLogHandler :
    INotificationHandler<TaskCreatedEvent>,
    INotificationHandler<TaskStatusChangedEvent>
{
    private readonly ILogger<TaskEventLogHandler> _logger;

    public TaskEventLogHandler(ILogger<TaskEventLogHandler> logger)
    {
        _logger = logger;
    }

    public async Task Handle(TaskCreatedEvent notification, CancellationToken cancellationToken)
    {
        _logger.LogInformation("üìã Task Created: {TaskId} - {Command} for {RepositoryPath} with priority {Priority}",
            notification.TaskId,
            notification.Command.Substring(0, Math.Min(50, notification.Command.Length)) + "...",
            notification.RepositoryPath,
            notification.Priority);

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É: –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –º–µ—Ç—Ä–∏–∫–∏ –∏ —Ç.–¥.
        await Task.CompletedTask;
    }

    public async Task Handle(TaskStatusChangedEvent notification, CancellationToken cancellationToken)
    {
        var statusEmoji = notification.NewStatus.ToString() switch
        {
            "Completed" => "‚úÖ",
            "Failed" => "‚ùå",
            "InProgress" => "üîÑ",
            "Assigned" => "üìå",
            _ => "üìù"
        };

        _logger.LogInformation("{Emoji} Task Status Changed: {TaskId} - {OldStatus} ‚Üí {NewStatus}",
            statusEmoji,
            notification.TaskId,
            notification.OldStatus,
            notification.NewStatus);

        if (!string.IsNullOrEmpty(notification.ErrorMessage))
        {
            _logger.LogWarning("Task {TaskId} failed with error: {ErrorMessage}",
                notification.TaskId, notification.ErrorMessage);
        }

        await Task.CompletedTask;
    }
}