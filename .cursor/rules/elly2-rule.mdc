---
alwaysApply: true
---
# Правила для проекта Elly2

## Git правила

### ⚠️ КРИТИЧЕСКИ ВАЖНО
**НИКОГДА НЕ КОММИТАЙ БЕЗ ПОДТВЕРЖДЕНИЯ! И ТЕМ БОЛЕЕ НЕ ПУШ В УДАЛЁННЫЙ РЕПОЗИТОРИЙ!**

### Процедура коммита

1. **Шаг 0:** Уточни, коммитать в текущую ветку или в новую
   - **Шаг 0.1:** Если в новую, то уточни/предложи её путь
2. **Шаг 1:** Затем отправь мне на подтверждение сформированное тобой сообщение к коммиту
3. **Шаг 2:** Затем показывай мне команду git, которую ты собираешься выполнить и запроси подтверждение на её выполнение
4. **Шаг 3:** Выполняй команду после подтверждения и уточни, не хочу ли я, чтобы ты запушил изменения

### Формат сообщения коммита

**Шаблон:** `"{task_hash}. {affected_projects}. {description}. Коммит выполнен при помощи Cursor AI."`

**Примеры:**
- `"8698mw4hr. Docs. Добавлена общая документация по развертыванию. Коммит выполнен при помощи Cursor AI"`
- `"8693z7h3h. Elly.Orchestrator. Elly.Logger. Обновлены правила логирования. Коммит выполнен при помощи Cursor AI"`

**Хеши задач:**
- `"8698mw4hr"` - хеш для технической документации
- `"8693z7h3h"` - хеш для регулярки

### Скрипт генерации сообщения коммита

- Расположение: `@rules/scripts/generate-commit-message.ps1`
- Назначение: извлекает `task_hash` из имени текущей ветки (последний сегмент после `/`, до первого `-` или `_`) и формирует сообщение коммита по шаблону.
- Запуск (PowerShell):
  - `powershell -File .\\.cursor\\scripts\\generate-commit-message.ps1 -AffectedProjects "Elly.Core. Elly.AuthService" -Description "Краткое описание изменений"`
- Результат: строка готового сообщения для `git commit -m "..."`

### Правила валидации

#### Перед коммитом:
1. Проверить, была ли явная просьба о коммите
2. Проверить наличие хеша задачи
3. Проверить корректность форматирования сообщения
4. Получить подтверждение на коммит

#### Перед пушем:
1. Проверить, была ли явная просьба о пуше
2. Проверить, что коммит был подтвержден
3. Получить подтверждение на пуш

### ⚠️ КРИТИЧЕСКИ ВАЖНО
**ПОВТОРЯЮ, НИКОГДА НЕ КОММИТАЙ, ЕСЛИ Я НЕ ПОПРОСИЛ ОБ ЭТОМ ЯВНО, И ТЕМ БОЛЕЕ НЕ ПУШ БЕЗ РАЗРЕШЕНИЯ!**

### Обработка ошибок

#### При отсутствии подтверждения:
1. Остановить выполнение
2. Запросить явное подтверждение
3. Продолжить только после получения подтверждения

#### При неправильном формате:
1. Показать правильный формат
2. Предложить исправленный вариант
3. Запросить подтверждение

## Правила работы с файлами

### Сохранение контекста
1. Всегда проверять summary диалога в начале работы
2. Проверять recently_viewed_files
3. Сохранять важные пути к файлам в контексте диалога
4. Если файл был упомянут в диалоге, искать его в той же директории, где он был в последний раз

### Поиск файлов
1. Использовать grep_search для поиска файла по характерным фразам из задания
2. Проверять директорию, где файл был в последний раз
3. Если файл не найден, проверить родительские директории
4. Если файл все еще не найден, проверить все директории проекта

### Модификация файлов
1. Перед модификацией файла всегда проверять его текущее содержимое
2. Сохранять контекст изменений в summary диалога
3. Если файл был модифицирован ранее в диалоге, учитывать эти изменения
4. Не создавать дублирующие файлы, если оригинальный файл существует

#### Обработка ошибок с файлами

**Файл не найден:**
1. Сообщить пользователю, что файл не найден
2. Попросить уточнить расположение файла
3. Предложить создать новый файл только если пользователь явно это запросил

**Дублирующие файлы:**
1. Сообщить пользователю о найденных дубликатах
2. Запросить подтверждение, какой файл использовать
3. Удалить лишние дубликаты после подтверждения

## Правила учёта времени (Timesheet)

### Отслеживание времени
1. Для каждой задачи создавать отдельную запись в Timesheet
2. Указывать хеш задачи в поле "Task"
3. Заполнять поле "Description" кратким описанием выполненной работы
4. Указывать время начала и окончания работы
5. Добавлять теги для категоризации работы (например, "backend", "frontend", "docs")

### Отчётность
1. В конце каждого дня формировать отчет о проделанной работе
2. В отчете указывать:
   - Общее время работы
   - Список выполненных задач
   - Задачи, требующие дополнительного времени
3. Отчет сохранять в формате Markdown в директории Timesheet

### Анализ
1. Еженедельно анализировать:
   - Время, затраченное на разные типы задач
   - Эффективность работы (отношение времени к результату)
   - Возможные оптимизации процесса
2. Результаты анализа добавлять в отчет

### Интеграция
1. Интегрировать Timesheet с системой управления задачами
2. Автоматически обновлять статус задачи при добавлении записи в Timesheet
3. Синхронизировать теги между системами

## Правила работы с TeamCity

### Запуск сборки
1. Запускать сборку через REST API TeamCity
2. Использовать параметры:
   - `branch`: текущая ветка
   - `commit`: последний коммит
   - `buildType`: тип сборки (например, "Elly2_Build")
3. Дожидаться завершения сборки
4. Анализировать результат сборки

### Мониторинг сборки
1. Отслеживать статус сборки
2. При ошибке:
   - Анализировать логи сборки
   - Определять причину ошибки
   - Предлагать решения
3. При успехе:
   - Сохранять артефакты сборки
   - Обновлять статус задачи

### Конфигурация сборки
1. Использовать конфигурацию из файла teamcity.json
2. Параметры сборки:
   - Версия .NET
   - Тип сборки (Debug/Release)
   - Тесты (включить/выключить)
3. Передавать параметры через REST API

#### Обработка ошибок сборки

**При неудачной сборке:**
1. Анализировать логи сборки
2. Определять тип ошибки:
   - Ошибки компиляции
   - Ошибки тестов
   - Ошибки деплоя
3. Предлагать решения в зависимости от типа ошибки

**При таймауте сборки:**
1. Прерывать сборку после таймаута
2. Сохранять промежуточные результаты
3. Предлагать оптимизации для ускорения сборки

## TeamCity инструменты

### get_build_status
**Описание:** Получить статус последней сборки для указанного типа сборки

**Параметры:**
- `buildTypeId` (обязательный): ID типа сборки (например, "Elly2_Build")
- `branch` (опциональный): Имя ветки

**Возвращает:**
- `status`: Статус сборки (SUCCESS, FAILURE, ERROR)
- `state`: Состояние сборки (running, finished)
- `branch`: Имя ветки  
- `commit`: Хеш последнего коммита

### get_build_history
**Описание:** Получить историю сборок для указанного типа сборки

**Параметры:**
- `buildTypeId` (обязательный): ID типа сборки
- `branch` (опциональный): Имя ветки
- `count` (опциональный): Количество сборок (по умолчанию 10)

**Возвращает:**
- `builds`: Массив сборок с информацией о каждой

### get_build_logs
**Описание:** Получить логи указанной сборки

**Параметры:**
- `buildId` (обязательный): ID сборки

**Возвращает:**
- `logs`: Текстовые логи сборки

### get_available_builds
**Описание:** Получить список всех доступных типов сборок и их конфигураций

**Параметры:**
- `projectId` (опциональный): ID проекта

**Возвращает:**
- `projects`: Массив проектов, каждый содержит:
  - `id`: ID проекта
  - `name`: Название проекта
  - `buildTypes`: Массив типов сборок, каждый содержит:
    - `id`: ID типа сборки
    - `name`: Название типа сборки
    - `projectId`: ID проекта
    - `parameters`: Массив параметров сборки
    - `triggers`: Массив триггеров сборки
    - `vcsRoots`: Массив корней VCS

    - `settings`: Дополнительные настройки 