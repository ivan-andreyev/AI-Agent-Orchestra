# COMPREHENSIVE DIRECTORY CATALOGIZATION + LINK FIXING
param(
    [switch]$Preview = $true,
    [switch]$Execute = $false
)

$PlanRoot = (Resolve-Path "Docs\PLAN\Galactic-Idlers-Plan").Path

function Write-Safety { param($msg) Write-Host $msg -ForegroundColor Magenta }
function Write-Danger { param($msg) Write-Host $msg -ForegroundColor Red -BackgroundColor Yellow }
function Write-Safe { param($msg) Write-Host $msg -ForegroundColor Green }
function Write-Info { param($msg) Write-Host $msg -ForegroundColor Cyan }

Write-Safety "=== COMPREHENSIVE DIRECTORY CATALOGIZATION + LINK FIXING ==="
Write-Info "–ü–æ–ª–Ω–∞—è –∫–∞—Ç–∞–ª–æ–≥–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫"

Write-Info "`n=== PHASE 1: –ê–ù–ê–õ–ò–ó –î–ò–†–ï–ö–¢–û–†–ò–ô ==="

# –ù–∞–π–¥–µ–º –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
$badDirs = Get-ChildItem -Path $PlanRoot -Recurse -Directory | Where-Object {
    $_.Name -match "^\d{2}-\d-" -or $_.Name -match "^\d{1}-\d-"
} | Sort-Object FullName

Write-Info "–ù–∞–π–¥–µ–Ω–æ $($badDirs.Count) –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∏–∑–∞—Ü–∏–∏"

# –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
$dirRenameOperations = @()

# –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π Models  
$dirMappings = @{
    "01-1-Core-Models" = "01-01-Core-Models"
    "01-1-Game-State" = "01-02-Game-State"
    "01-2-Progression" = "01-03-Progression" 
    "01-2-Progression-Models" = "01-04-Progression-Models"
    "01-3-API" = "01-05-API"
    "01-3-API-Models" = "01-06-API-Models"
    "01-4-CQRS-Models" = "01-07-CQRS-Models"
    "01-5-Unity-Bridge" = "01-08-Unity-Bridge"
}

foreach ($dir in $badDirs) {
    $oldName = $dir.Name
    $newName = $null
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if ($dirMappings.ContainsKey($oldName)) {
        $newName = $dirMappings[$oldName]
    }
    # –û–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –ø—Ä–æ—Å—Ç–æ–µ padding
    elseif ($oldName -match "^(\d{2})-(\d)-(.+)$") {
        $part1 = $matches[1]
        $part2 = $matches[2].PadLeft(2,'0')
        $suffix = $matches[3]
        $newName = "$part1-$part2-$suffix"
    }
    # –ì–ª—É–±–æ–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    elseif ($oldName -match "^(\d{2})-(\d)-(\d)-(.+)$") {
        $part1 = $matches[1]
        $part2 = $matches[2].PadLeft(2,'0')
        $part3 = $matches[3].PadLeft(2,'0')
        $suffix = $matches[4]
        $newName = "$part1-$part2-$part3-$suffix"
    }
    
    if ($newName -and $newName -ne $oldName) {
        $newPath = Join-Path (Split-Path $dir.FullName) $newName
        
        $dirRenameOperations += @{
            OldPath = $dir.FullName
            NewPath = $newPath
            OldName = $oldName
            NewName = $newName
            RelativePath = $dir.FullName.Substring($PlanRoot.Length + 1)
            NewRelativePath = $newPath.Substring($PlanRoot.Length + 1)
        }
    }
}

Write-Info "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ $($dirRenameOperations.Count) –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"

Write-Info "`n=== PHASE 2: –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–£–Æ–©–ò–• –§–ê–ô–õ–û–í ==="

$modelsDir = Join-Path $PlanRoot "01-Models"
$duplicateFiles = @()

# –ù–∞–π–¥–µ–º —Ñ–∞–π–ª—ã —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
$rootFiles = Get-ChildItem -Path $modelsDir -Filter "*.md" | Where-Object {
    $_.Name -match "^01-0\d-"
}

foreach ($file in $rootFiles) {
    if ($file.Name -eq "01-01-Game-State.md") {
        $duplicateFiles += @{
            OldPath = $file.FullName
            NewPath = Join-Path $modelsDir "01-02-Game-State-Overview.md"
            OldName = $file.Name
            NewName = "01-02-Game-State-Overview.md"
            Reason = "–î—É–±–ª–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é 01-02-Game-State"
        }
    }
    elseif ($file.Name -eq "01-02-Progression.md") {
        $duplicateFiles += @{
            OldPath = $file.FullName
            NewPath = Join-Path $modelsDir "01-03-Progression-Overview.md"
            OldName = $file.Name
            NewName = "01-03-Progression-Overview.md"
            Reason = "–î—É–±–ª–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é 01-03-Progression"
        }
    }
}

Write-Info "–ù–∞–π–¥–µ–Ω–æ $($duplicateFiles.Count) –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"

Write-Info "`n=== PHASE 3: –ü–û–î–ì–û–¢–û–í–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–°–´–õ–û–ö ==="

# –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –∑–∞–º–µ–Ω —Å—Å—ã–ª–æ–∫
$linkReplacements = @{}

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ–Ω—ã –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
foreach ($op in $dirRenameOperations) {
    $oldRelative = $op.RelativePath.Replace('\', '/')
    $newRelative = $op.NewRelativePath.Replace('\', '/')
    $linkReplacements[$oldRelative] = $newRelative
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
    $oldDirName = Split-Path $oldRelative -Leaf
    $newDirName = Split-Path $newRelative -Leaf
    $linkReplacements[$oldDirName] = $newDirName
}

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ–Ω—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤
foreach ($dup in $duplicateFiles) {
    $oldFileName = $dup.OldName
    $newFileName = $dup.NewName
    $linkReplacements[$oldFileName] = $newFileName
}

Write-Info "–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ $($linkReplacements.Count) –∑–∞–º–µ–Ω –¥–ª—è —Å—Å—ã–ª–æ–∫"

if ($Preview) {
    Write-Info "`n=== PREVIEW: –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–Ø –î–ò–†–ï–ö–¢–û–†–ò–ô (–ø–µ—Ä–≤—ã–µ 20) ==="
    
    $dirRenameOperations | Select-Object -First 20 | ForEach-Object {
        Write-Host "`nüìÅ $($_.RelativePath)" -ForegroundColor White
        Write-Host "   ‚ùå OLD: $($_.OldName)" -ForegroundColor Red
        Write-Host "   ‚úÖ NEW: $($_.NewName)" -ForegroundColor Green
    }
    
    if ($dirRenameOperations.Count -gt 20) {
        Write-Host "`n... –∏ –µ—â—ë $($dirRenameOperations.Count - 20) –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π" -ForegroundColor Yellow
    }
    
    if ($duplicateFiles.Count -gt 0) {
        Write-Info "`n=== PREVIEW: –î–£–ë–õ–ò–†–£–Æ–©–ò–ï –§–ê–ô–õ–´ ==="
        foreach ($dup in $duplicateFiles) {
            Write-Host "`nüìÑ $($dup.OldName) ‚Üí $($dup.NewName)" -ForegroundColor Yellow
            Write-Host "   –ü—Ä–∏—á–∏–Ω–∞: $($dup.Reason)" -ForegroundColor Gray
        }
    }
    
    Write-Info "`n=== PREVIEW: –ü–†–ò–ú–ï–†–´ –ó–ê–ú–ï–ù –°–°–´–õ–û–ö ==="
    $linkReplacements.GetEnumerator() | Select-Object -First 10 | ForEach-Object {
        Write-Host "   üîó $($_.Key) ‚Üí $($_.Value)" -ForegroundColor Cyan
    }
    
    if ($linkReplacements.Count -gt 10) {
        Write-Host "`n... –∏ –µ—â—ë $($linkReplacements.Count - 10) –∑–∞–º–µ–Ω —Å—Å—ã–ª–æ–∫" -ForegroundColor Yellow
    }
}

if ($Execute) {
    Write-Danger "`n=== –í–´–ü–û–õ–ù–ï–ù–ò–ï –ö–û–ú–ü–õ–ï–ö–°–ù–û–ô –ö–ê–¢–ê–õ–û–ì–ò–ó–ê–¶–ò–ò ==="
    
    $confirm = Read-Host "Type 'EXECUTE COMPREHENSIVE CATALOGIZATION' to proceed with $($dirRenameOperations.Count + $duplicateFiles.Count) renames + link fixes"
    
    if ($confirm -eq "EXECUTE COMPREHENSIVE CATALOGIZATION") {
        $successCount = 0
        $errorCount = 0
        
        Write-Info "`n--- STEP 1: –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ï –î–ò–†–ï–ö–¢–û–†–ò–ô ---"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥–ª—É–±–∏–Ω–µ (—Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –≥–ª—É–±–æ–∫–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
        $sortedDirOps = $dirRenameOperations | Sort-Object { ($_.RelativePath -split '\\').Count } -Descending
        
        foreach ($op in $sortedDirOps) {
            try {
                if (Test-Path $op.NewPath) {
                    Write-Danger "‚ùå SKIP: Target exists - $($op.NewName)"
                    $errorCount++
                    continue
                }
                
                Rename-Item -Path $op.OldPath -NewName $op.NewName
                Write-Safe "‚úÖ DIR: $($op.OldName) ‚Üí $($op.NewName)"
                $successCount++
                
            } catch {
                Write-Danger "‚ùå FAILED DIR: $($op.OldName) - $($_.Exception.Message)"
                $errorCount++
            }
        }
        
        Write-Info "`n--- STEP 2: –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ï –î–£–ë–õ–ò–†–£–Æ–©–ò–• –§–ê–ô–õ–û–í ---"
        
        foreach ($dup in $duplicateFiles) {
            try {
                if (Test-Path $dup.NewPath) {
                    Write-Danger "‚ùå SKIP: Target exists - $($dup.NewName)"
                    $errorCount++
                    continue
                }
                
                Rename-Item -Path $dup.OldPath -NewName $dup.NewName
                Write-Safe "‚úÖ FILE: $($dup.OldName) ‚Üí $($dup.NewName)"
                $successCount++
                
            } catch {
                Write-Danger "‚ùå FAILED FILE: $($dup.OldName) - $($_.Exception.Message)"
                $errorCount++
            }
        }
        
        Write-Info "`n--- STEP 3: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–°–´–õ–û–ö –í –§–ê–ô–õ–ê–• ---"
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ markdown —Ñ–∞–π–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
        $allMarkdownFiles = Get-ChildItem -Path $PlanRoot -Recurse -Filter "*.md" | Where-Object { 
            $_.FullName -notmatch "\\reviews\\" 
        }
        
        Write-Info "–û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ $($allMarkdownFiles.Count) —Ñ–∞–π–ª–∞—Ö..."
        
        $linkFixesCount = 0
        $filesWithLinksFixed = 0
        
        foreach ($file in $allMarkdownFiles) {
            try {
                $content = Get-Content $file.FullName -Raw -ErrorAction SilentlyContinue
                if (-not $content) { continue }
                
                $originalContent = $content
                $fileChanges = 0
                
                foreach ($oldLink in $linkReplacements.Keys) {
                    $newLink = $linkReplacements[$oldLink]
                    $beforeCount = ([regex]::Matches($content, [regex]::Escape($oldLink))).Count
                    
                    if ($beforeCount -gt 0) {
                        $content = $content -replace [regex]::Escape($oldLink), $newLink
                        $fileChanges += $beforeCount
                        $linkFixesCount += $beforeCount
                    }
                }
                
                if ($content -ne $originalContent) {
                    Set-Content -Path $file.FullName -Value $content -Encoding UTF8 -NoNewline
                    $filesWithLinksFixed++
                    
                    $relativePath = $file.FullName.Substring($PlanRoot.Length + 1)
                    Write-Safe "‚úÖ LINKS: $relativePath ($fileChanges fixes)"
                }
                
            } catch {
                Write-Danger "‚ùå FAILED LINKS: $($file.Name) - $($_.Exception.Message)"
                $errorCount++
            }
        }
        
        Write-Safe "`nüéâ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ö–ê–¢–ê–õ–û–ì–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!"
        Write-Host "‚úÖ Directory renames: $($dirRenameOperations.Count)" -ForegroundColor Green
        Write-Host "‚úÖ File renames: $($duplicateFiles.Count)" -ForegroundColor Green
        Write-Host "‚úÖ Files with links fixed: $filesWithLinksFixed" -ForegroundColor Green
        Write-Host "‚úÖ Total link fixes: $linkFixesCount" -ForegroundColor Green
        
        if ($errorCount -gt 0) {
            Write-Host "‚ùå Errors encountered: $errorCount" -ForegroundColor Red
        }
        
    } else {
        Write-Info "‚ùå Operation cancelled"
    }
}

Write-Info "`n=== COMPREHENSIVE CATALOGIZATION SUMMARY ==="
Write-Host "Directories to rename: $($dirRenameOperations.Count)" -ForegroundColor Cyan
Write-Host "Duplicate files to fix: $($duplicateFiles.Count)" -ForegroundColor Cyan
Write-Host "Link replacements prepared: $($linkReplacements.Count)" -ForegroundColor Cyan
Write-Host "Total operations: $($dirRenameOperations.Count + $duplicateFiles.Count + $linkReplacements.Count)" -ForegroundColor Green