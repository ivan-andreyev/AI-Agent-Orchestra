# FINAL DIRECTORY CLEANUP - –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã
param(
    [switch]$Preview = $true,
    [switch]$Execute = $false
)

$PlanRoot = (Resolve-Path "Docs\PLAN\Galactic-Idlers-Plan").Path

function Write-Safety { param($msg) Write-Host $msg -ForegroundColor Magenta }
function Write-Danger { param($msg) Write-Host $msg -ForegroundColor Red -BackgroundColor Yellow }
function Write-Safe { param($msg) Write-Host $msg -ForegroundColor Green }
function Write-Info { param($msg) Write-Host $msg -ForegroundColor Cyan }

Write-Safety "=== FINAL DIRECTORY CLEANUP ==="
Write-Info "–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –æ–¥–∏–Ω–æ—á–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏"

Write-Info "`n=== PHASE 1: –ü–û–ò–°–ö –û–°–¢–ê–í–®–ò–•–°–Ø –ü–†–û–ë–õ–ï–ú ==="

# –ù–∞–π–¥–µ–º –í–°–ï –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –æ–¥–∏–Ω–æ—á–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è
$remainingBadDirs = Get-ChildItem -Path $PlanRoot -Recurse -Directory | Where-Object {
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≥–¥–µ –µ—Å—Ç—å –æ–¥–∏–Ω–æ—á–Ω–∞—è —Ü–∏—Ñ—Ä–∞ –º–µ–∂–¥—É —Ç–∏—Ä–µ (–Ω–æ –Ω–µ –≤ —Å–æ—Å—Ç–∞–≤–µ 2-–∑–Ω–∞—á–Ω–æ–≥–æ —á–∏—Å–ª–∞)
    $_.Name -match "-\d-" -and $_.Name -notmatch "-\d{2}-\d{2}-"
} | Sort-Object FullName

Write-Info "–ù–∞–π–¥–µ–Ω–æ $($remainingBadDirs.Count) –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –ø—Ä–æ–±–ª–µ–º–∞–º–∏"

if ($remainingBadDirs.Count -eq 0) {
    Write-Safe "‚úÖ –í—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–∞—Ç–∞–ª–æ–≥–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!"
    exit 0
}

# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º
$problems = @{
    "XX-X-Y" = @()
    "XX-XX-X" = @()
    "XX-X-XX" = @()
    "XX-XX-XX-X" = @()
    "Other" = @()
}

foreach ($dir in $remainingBadDirs) {
    $name = $dir.Name
    if ($name -match "^\d{2}-\d-\d-") {
        $problems["XX-X-Y"] += $dir
    }
    elseif ($name -match "^\d{2}-\d{2}-\d-") {
        $problems["XX-XX-X"] += $dir
    }
    elseif ($name -match "^\d{2}-\d-\d{2}-") {
        $problems["XX-X-XX"] += $dir
    }
    elseif ($name -match "^\d{2}-\d{2}-\d{2}-\d-") {
        $problems["XX-XX-XX-X"] += $dir
    }
    else {
        $problems["Other"] += $dir
    }
}

Write-Info "`n–¢–∏–ø—ã –ø—Ä–æ–±–ª–µ–º:"
foreach ($type in $problems.Keys) {
    $count = $problems[$type].Count
    if ($count -gt 0) {
        Write-Host "  $type`: $count –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π" -ForegroundColor Yellow
    }
}

Write-Info "`n=== PHASE 2: –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ==="

$finalRenameOperations = @()

foreach ($dir in $remainingBadDirs) {
    $oldName = $dir.Name
    $newName = $oldName
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ü–∏—Ñ—Ä –Ω–∞ –¥–≤—É–∑–Ω–∞—á–Ω—ã–µ
    $newName = $newName -replace '-(\d)-', '-0$1-'
    
    if ($newName -ne $oldName) {
        $newPath = Join-Path (Split-Path $dir.FullName) $newName
        
        $finalRenameOperations += @{
            OldPath = $dir.FullName
            NewPath = $newPath
            OldName = $oldName
            NewName = $newName
            RelativePath = $dir.FullName.Substring($PlanRoot.Length + 1)
            NewRelativePath = $newPath.Substring($PlanRoot.Length + 1)
        }
    }
}

Write-Info "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ $($finalRenameOperations.Count) —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π"

if ($Preview -and $finalRenameOperations.Count -gt 0) {
    Write-Info "`n=== PREVIEW: –§–ò–ù–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–Ø ==="
    
    foreach ($op in $finalRenameOperations) {
        Write-Host "`nüìÅ $($op.RelativePath)" -ForegroundColor White
        Write-Host "   ‚ùå OLD: $($op.OldName)" -ForegroundColor Red
        Write-Host "   ‚úÖ NEW: $($op.NewName)" -ForegroundColor Green
    }
}

if ($Execute -and $finalRenameOperations.Count -gt 0) {
    Write-Danger "`n=== –í–´–ü–û–õ–ù–ï–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–û–ô –û–ß–ò–°–¢–ö–ò ==="
    
    $confirm = Read-Host "Type 'EXECUTE FINAL DIRECTORY CLEANUP' to proceed with $($finalRenameOperations.Count) final renames"
    
    if ($confirm -eq "EXECUTE FINAL DIRECTORY CLEANUP") {
        Write-Info "`n--- –í–´–ü–û–õ–ù–ï–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–´–• –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ô ---"
        
        $successCount = 0
        $errorCount = 0
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥–ª—É–±–∏–Ω–µ (—Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –≥–ª—É–±–æ–∫–∏–µ)
        $sortedOps = $finalRenameOperations | Sort-Object { ($_.RelativePath -split '\\').Count } -Descending
        
        foreach ($op in $sortedOps) {
            try {
                if (Test-Path $op.NewPath) {
                    Write-Danger "‚ùå SKIP: Target exists - $($op.NewName)"
                    $errorCount++
                    continue
                }
                
                Rename-Item -Path $op.OldPath -NewName $op.NewName
                Write-Safe "‚úÖ FINAL: $($op.OldName) ‚Üí $($op.NewName)"
                $successCount++
                
            } catch {
                Write-Danger "‚ùå FAILED: $($op.OldName) - $($_.Exception.Message)"
                $errorCount++
            }
        }
        
        Write-Safe "`nüéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –î–ò–†–ï–ö–¢–û–†–ò–ô –ó–ê–í–ï–†–®–ï–ù–ê!"
        Write-Host "‚úÖ Successfully renamed: $successCount directories" -ForegroundColor Green
        
        if ($errorCount -gt 0) {
            Write-Host "‚ùå Failed renames: $errorCount directories" -ForegroundColor Red
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        Write-Info "`n--- –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê ---"
        $remainingAfterFix = Get-ChildItem -Path $PlanRoot -Recurse -Directory | Where-Object {
            $_.Name -match "-\d-" -and $_.Name -notmatch "-\d{2}-"
        }
        
        if ($remainingAfterFix.Count -eq 0) {
            Write-Safe "‚úÖ –ò–î–ï–ê–õ–¨–ù–û! –í—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ç–∞–ª–æ–≥–∏–∑–∞—Ü–∏—é!"
        } else {
            Write-Danger "‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å $($remainingAfterFix.Count) –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏"
            $remainingAfterFix | Select-Object -First 5 | ForEach-Object {
                $relativePath = $_.FullName.Substring($PlanRoot.Length + 1)
                Write-Host "   üìÅ $relativePath" -ForegroundColor Yellow
            }
        }
        
    } else {
        Write-Info "‚ùå Operation cancelled"
    }
}

Write-Info "`n=== FINAL DIRECTORY CLEANUP SUMMARY ==="
Write-Host "Remaining bad directories: $($remainingBadDirs.Count)" -ForegroundColor Cyan
Write-Host "Final rename operations: $($finalRenameOperations.Count)" -ForegroundColor Green